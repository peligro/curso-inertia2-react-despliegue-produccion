name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      DEEPSEEK_API_URL: ${{ secrets.DEEPSEEK_API_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_URL: ${{ secrets.GEMINI_BASE_URL }}
      VITE_APP_URL: ${{ secrets.VITE_APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Despliegue en EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on error
            cd /home/ubuntu/proyecto
             
            echo "üîÑ Pulling latest code from main branch..."
            git fetch origin main
            git reset --hard origin/main
            
            echo "üìù Creating .env file from .env.example..."
            # Copiar .env.example como base
            cp .env.example .env
            
            # Funci√≥n para actualizar o agregar variables
            update_env_var() {
              local key="$1"
              local value="$2"
              
              if grep -q "^$key=" .env; then
                # Reemplazar variable existente
                sed -i "s|^$key=.*|$key=$value|" .env
              else
                # Agregar variable nueva al final
                echo "$key=$value" >> .env
              fi
            }
            
            # Actualizar variables espec√≠ficas
            update_env_var "APP_KEY" "${{ secrets.APP_KEY }}"
            update_env_var "APP_DEBUG" "false"
            update_env_var "APP_ENV" "production"
            update_env_var "APP_URL" "http://${{ secrets.EC2_HOST }}"
            
            update_env_var "DB_CONNECTION" "pgsql"
            update_env_var "DB_HOST" "${{ secrets.DB_HOST }}"
            update_env_var "DB_PORT" "${{ secrets.DB_PORT }}"
            update_env_var "DB_DATABASE" "${{ secrets.DB_DATABASE }}"
            update_env_var "DB_USERNAME" "${{ secrets.DB_USERNAME }}"
            update_env_var "DB_PASSWORD" "${{ secrets.DB_PASSWORD }}"
            
            update_env_var "AWS_USE_PATH_STYLE_ENDPOINT" "${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}"
            
            update_env_var "OPENAI_API_KEY" "${{ secrets.OPENAI_API_KEY }}"
            update_env_var "DEEPSEEK_API_KEY" "${{ secrets.DEEPSEEK_API_KEY }}"
            update_env_var "DEEPSEEK_API_URL" "${{ secrets.DEEPSEEK_API_URL }}"
            update_env_var "GEMINI_API_KEY" "${{ secrets.GEMINI_API_KEY }}"
            update_env_var "GEMINI_BASE_URL" "${{ secrets.GEMINI_BASE_URL }}"
            
            update_env_var "VITE_APP_URL" "${{ secrets.VITE_APP_URL }}"
            
            echo "üîê Setting file permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod 644 .env
            
            echo "üê≥ Stopping and cleaning Docker containers..."
            docker compose down --remove-orphans || true
            docker system prune -a -f || true
            docker volume prune -f || true
            
            echo "üèóÔ∏è Building and starting containers..."
            docker compose up --build -d
            
            echo "‚è≥ Waiting for containers to be ready..."
            sleep 30
            
            echo "üì¶ Running migrations..."
            docker exec peligro-laravel-app php artisan migrate --force
            
            echo "‚ö° Optimizing application..."
            docker exec peligro-laravel-app php artisan optimize
            docker exec peligro-laravel-app php artisan config:cache
            docker exec peligro-laravel-app php artisan route:cache
            docker exec peligro-laravel-app php artisan view:cache
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application URL: http://${{ secrets.EC2_HOST }}"