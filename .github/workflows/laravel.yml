name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      DEEPSEEK_API_URL: ${{ secrets.DEEPSEEK_API_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_URL: ${{ secrets.GEMINI_BASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ SSH connection successful!'"

      - name: Despliegue en EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on any error
            
            cd /home/ubuntu/proyecto
             
            echo "🚀 Pulling latest code from main branch..."
            git fetch origin main
            git reset --hard origin/main
            
            echo "📝 Creating .env file..."
            # Método más simple y confiable para crear .env
            cat > .env << EOF
            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=${{ secrets.APP_KEY }}
            APP_DEBUG=false
            APP_URL=http://${{ secrets.EC2_HOST }}

            DB_CONNECTION=pgsql
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
            DEEPSEEK_API_URL=${{ secrets.DEEPSEEK_API_URL }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GEMINI_BASE_URL=${{ secrets.GEMINI_BASE_URL }}

            LOG_CHANNEL=stack
            CACHE_DRIVER=file
            SESSION_DRIVER=file
            SESSION_LIFETIME=120
            QUEUE_CONNECTION=sync
            EOF

            echo "🔐 Setting file permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod 644 .env
            
            echo "🐳 Stopping and cleaning Docker containers..."
            docker compose down --remove-orphans || true
            docker system prune -a -f || true
            docker volume prune -f || true
            
            echo "🏗️ Building and starting containers..."
            docker compose up --build -d
            
            echo "⏳ Waiting for containers to be ready..."
            # Esperar específicamente a que el contenedor de PHP esté saludable
            for i in {1..30}; do
                if docker ps | grep -q "peligro-laravel-app"; then
                    echo "✅ Container is running!"
                    break
                fi
                sleep 2
            done
            
            # Esperar adicionalmente para que PHP-FPM esté listo
            sleep 10
            
            echo "📦 Running Laravel optimizations..."
            # Ejecutar migraciones PRIMERO
            docker exec peligro-laravel-app php artisan migrate --force
            
            # Limpiar cache antes de optimizar
            docker exec peligro-laravel-app php artisan config:clear
            docker exec peligro-laravel-app php artisan cache:clear
            docker exec peligro-laravel-app php artisan view:clear
            
            # Optimizar para producción
            docker exec peligro-laravel-app php artisan config:cache
            docker exec peligro-laravel-app php artisan route:cache
            docker exec peligro-laravel-app php artisan view:cache
            docker exec peligro-laravel-app php artisan optimize
            
            echo "🔍 Verifying deployment..."
            # Verificar que la aplicación responda
            curl -f http://localhost:80 || echo "⚠️  Application might need more time to start"
            
            echo "🎉 ¡Implementación completada exitosamente!"
            echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"