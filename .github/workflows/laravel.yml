name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      DEEPSEEK_API_URL: ${{ secrets.DEEPSEEK_API_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_URL: ${{ secrets.GEMINI_BASE_URL }}
      VITE_APP_URL: ${{ secrets.VITE_APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Despliegue en EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on error
            cd /home/ubuntu/proyecto
             
            echo "🔄 Pulling latest code from main branch..."
            git fetch origin main
            git reset --hard origin/main
            
            echo "📝 Creating .env file from .env.example..."
            # Copiar .env.example como base
            cp .env.example .env
            
            # Sobrescribir solo las variables necesarias
            echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
            echo "APP_DEBUG=false" >> .env
            echo "APP_ENV=production" >> .env
            echo "APP_URL=http://${{ secrets.EC2_HOST }}" >> .env
            
            echo "DB_CONNECTION=pgsql" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            
            echo "AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}" >> .env
            
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> .env
            echo "DEEPSEEK_API_URL=${{ secrets.DEEPSEEK_API_URL }}" >> .env
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
            echo "GEMINI_BASE_URL=${{ secrets.GEMINI_BASE_URL }}" >> .env
            
            echo "VITE_APP_URL=${{ secrets.VITE_APP_URL }}" >> .env
            
            # Eliminar duplicados manteniendo comentarios y estructura
            awk -F= '!seen[$1]++' .env > .env.tmp && mv .env.tmp .env
            
            echo "🔐 Setting file permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod 644 .env
            
            echo "🐳 Stopping and cleaning Docker containers..."
            docker compose down --remove-orphans || true
            docker system prune -a -f || true
            docker volume prune -f || true
            
            echo "🏗️ Building and starting containers..."
            docker compose up --build -d
            
            echo "⏳ Waiting for containers to be ready..."
            sleep 30
            
            echo "📦 Running migrations..."
            docker exec peligro-laravel-app php artisan migrate --force
            
            echo "⚡ Optimizing application..."
            docker exec peligro-laravel-app php artisan optimize
            docker exec peligro-laravel-app php artisan config:cache
            docker exec peligro-laravel-app php artisan route:cache
            docker exec peligro-laravel-app php artisan view:cache
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"